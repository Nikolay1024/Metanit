using System;

namespace OpenClosedPrinciple.Example1
{
    // SOLID. O - Принцип Открытости/Закрытости (Open/Closed Principle) можно сформулировать так:
    // Сущности программы должны быть открыты для расширения, но закрыты для изменения.
    // Суть этого принципа состоит в том, что система должна быть построена таким образом, что все ее последующие изменения должны быть
    // реализованы с помощью добавления нового кода, а не изменения уже существующего.
    class Cook1
    {
        public string Name { get; set; }

        public Cook1(string name) => Name = name;

        public void MakeDinner()
        {
            Console.WriteLine("Чистим картошку.");
            Console.WriteLine("Ставим почищенную картошку на огонь.");
            Console.WriteLine("Сливаем остатки воды, разминаем варенный картофель в пюре.");
            Console.WriteLine("Посыпаем пюре специями и зеленью.");
            Console.WriteLine("Картофельное пюре готово.");
        }
    }

    // Хотелось бы, чтобы повар мог приготовить еще что-то. И в этом случае мы подходим к необходимости изменения функционала класса, а именно
    // метода MakeDinner. Но в соответствии с рассматриваемым нами принципом классы должны быть открыты для расширения, но закрыты для изменения.
    // То есть, нам надо сделать класс Cook отрытым для расширения, но при этом не изменять.
    // Для решения этой задачи мы можем воспользоваться паттерном . В первую очередь нам надо вынести из класса и
    // инкапсулировать всю ту часть, которая представляет изменяющееся поведение. В нашем случае это метод MakeDinner. Т.е., все, что подается
    // изменению, выносится из класса и инкапсулируется во внешних сущностях.
    class Cook2
    {
        public string Name { get; set; }

        public Cook2(string name) => Name = name;

        public void MakeDinner(IMeal meal) => meal.Make();
    }

    // Стратегия (Strategy).
    interface IMeal
    {
        void Make();
    }
    class PotatoMeal2 : IMeal
    {
        public void Make()
        {
            Console.WriteLine("Чистим картошку.");
            Console.WriteLine("Ставим почищенную картошку на огонь.");
            Console.WriteLine("Сливаем остатки воды, разминаем варенный картофель в пюре.");
            Console.WriteLine("Посыпаем пюре специями и зеленью.");
            Console.WriteLine("Картофельное пюре готово.");
        }
    }
    class SaladMeal2 : IMeal
    {
        public void Make()
        {
            Console.WriteLine("Нарезаем помидоры и огурцы.");
            Console.WriteLine("Посыпаем зеленью, солью и специями.");
            Console.WriteLine("Поливаем подсолнечным маслом.");
            Console.WriteLine("Салат готов.");
        }
    }
}
